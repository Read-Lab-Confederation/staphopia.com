group_by(all_snp_ids,snp_id)
all_snp_ids <- collect(snp_ids_tread) %>% select(snp_id)
all_snp_ids <- collect(snp_ids_tread)
select(all_snp_ids,snp_id)
select(all_snp_ids,snp_id) %>% group_by(snp_id)
select(all_snp_ids,snp_id) %>% group_by(snp_id) %>% distinct(snp_id)
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) # for some reason this give the minimal set
snp_id_list
rm(snp_id_list)
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) %>% collect()
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) # for some reason this give the minimal set
snp_id_list
snp_id <- collect(snp_id_list)
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
snp_id_list
snp_id2 <- collect(snp_id_list)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
anal_variantSNP
temp <- c(a,a,a,a,a,a,a,a,a,a,a,a,)
temp <- rep("a",10)
temp
temp[2,3,9] <- c("b","c","d")
temp[2,3,9] <- "a"
temp[2] <- "b"
temp
?replace
replace(temp,c(2,3,8),c("b","c","d"))
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
ref_pos
N315 <- ref_pos(select,reference_position) %>% collect()
N315 <- select(ref_pos,reference_position) %>% collect()
N315
N315 <- select(ref_pos,reference_base) %>% collect()
N315
library("Biostrings")
?injectSNPs
rm(snp_id)
rm(snp_id2)
N315
paste(N315$reference_base,sep = "")
?collapse
paste(N315$reference_base,sep = "",collapse = "")
?DNAString
N315.df <- N315
N315 <- DNAString(paste(N315$reference_base,sep = "",collapse = ""))
N315
N315 <- DNAString(paste(N315$reference_base,sep = "",collapse = ""), use.names = TRUE)
N315 <- DNAString(paste(N315$reference_base,sep = "",collapse = ""))
N315 <- DNAString(paste(N315$reference_base,sep = "",collapse = ""))
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""), use.names = TRUE)
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
samples_tab
tread_samples
snp_ids_tread
?require
library("assertthat")
pull_SNPs_by_strain <-function(strain){
assert_that(N315.df)
assert_that(snp_ids_tread)
}
pull_SNPs_by_strain("X")
?exists
pull_SNPs_by_strain <-function(strain){
assert_that(exists(N315.df))
assert_that(exists(snp_ids_tread))
}
pull_SNPs_by_strain("X")
exists(N315.df)
is.data.frame(N315)
is.data.frame(N315.df)
is.data.frame(snp_ids_tread)
str(snp_ids_tread)
exists(snp_ids_tread)
not_empty(snp_ids_tread)
has_attr(snp_ids_tread)
filter(snp_ids_tread,strain == "NRS218") %>% select(snp_id)
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
temp.df <- pull_SNPs_by_strain("NRS218")
more temp.df
temp.df
N315.df
#Identify a set of strains from the DB.  Produce a phylogeny.
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
#ena_exp <- tbl(db,"ena_experiment")
#sample_accs <- filter(ena_exp,study_accession == "PRJNA239001") %>% select(sample_accession)
#open tables
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
# download reference DNA string  (note, its already ordered by reference position)
N315.df <- select(ref_pos,reference_base,snp_id) %>% collect()
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
#add assertion here
assert_that(is.data.frame(N315.df))
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
temp.df <- pull_SNPs_by_strain("NRS218")
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
install.packages("RPostgreSQL")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
# download reference DNA string  (note, its already ordered by reference position)
N315.df <- select(ref_pos,reference_base,snp_id) %>% collect()
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
#add assertion here
assert_that(is.data.frame(N315.df))
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
temp.df <- pull_SNPs_by_strain("NRS218")
N315
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
N315.df
ref_pos
rm(temp)
temp.df
View(temp.df)
db
View(N315.df)
N315.df <- select(ref_pos,reference_base,snp_id) %>% collect()
db <- staphopia_logon()
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
anal_variantSNP
snp_id_list
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
snp_id_list
samples_tab
rm(samples_tab)
samples_tab <-tbl(db,"samples_sample")
samples_tab
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
#ena_exp <- tbl(db,"ena_experiment")
#sample_accs <- filter(ena_exp,study_accession == "PRJNA239001") %>% select(sample_accession)
#open tables
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_id_list,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
snp_ids_tread
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
N315.df <- select(ref_pos,reference_base,snp_id) %>% collect()
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
assert_that(is.data.frame(N315.df))
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
View(N315.df)
temp.df <- pull_SNPs_by_strain("NRS218")
View(temp.df)
View(N315.df)
?bind_cols
bind_cols(N315.df,(1:length(N315.df)))
bind_cols(N315.df,as.data.frame(1:length(N315.df)))
1:length(N315.df)
1:nrow(N315.df)
?"cbind"
cbind(N315.df,1:nrow(N315.df))
View(N315.df)
N315.df <- cbind(N315.df,1:nrow(N315.df))
colnames(N315.df)[,3] <- "ct"
colnames(N315.df)[3] <- "ct"
not_empty(N315.df)
View(temp.df)
View(temp.df)
temp2.df <- inner_join(N315.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
View(temp2.df)
DNA_list <- replaceLetterAt(N315,temp2$ct,temp2$alternate_base)
DNA_list <- replaceLetterAt(N315,temp2.df$ct,temp2.df$alternate_base)
DNA_list
DNA_list[9]
N315[9]
N315[10]
N315[10]
N315[10:20]
DNA_list[10:20]
DNA_list[9:20]
N315[9:20]
temp3 <- DNAStringSet(c(N315,DNA_list))
?writeXStringSet
temp3
temp3 <- DNAStringSet(N315,DNA_list)
temp3[1] <- N315
temp3 <- DNAStringSet()
temp3[1] <- N315
temp3 <- DNAStringSet([N315,DNA_list])
temp3
str(N315)
N315$seq
N315$length
NN315
N315
N315@seq
sequence(N315)
seq(N315)
N315
N315[1]
temp3 <- DNAStringSet(paste(N315.df$reference_base,sep = "",collapse = ""))
temp3
names(temp3) <- "N315"
temp3
temp3[2] <- replaceLetterAt(temp3[1],temp2.df$ct,temp2.df$alternate_base)
temp3[1]
DNA_list <- replaceLetterAt(temp3[1],temp2.df$ct,temp2.df$alternate_base)
N315$seq
seq(N315)
DNA_ALPHABET(N315)
browseVignettes("Biostrings")
toString(N315)
DNA_list
toString(DNA_list)
seqA <- DNAString("acatagcatgca")
seqB <-DNAString("cactgtg")
toString(c(seqA,seqB))
toString(seqA,seqB)
seqs <- DNAStringSet(c(seqA,seqB))
seqs
seqs <- DNAStringSet(c(toString(seqA),toString(seqB))
)
seqs
N315 <- paste(N315.df$reference_base,sep = "",collapse = "")
rm(DNA_list)
?list
strain_DNA <- replace(N315,temp2.df$ct,temp2.df$alternate_base)
seqC = "aggctgtaccttgtg"
seqs <- c(seqA,seqB)
seqs
seqA
seqs <- (seqA,seqB)
seqs <- list(seqA,seqB)
seqs
seqDSS <- DNAStringSet(seqs)
seqDSS
seqs <- list(list(N315),seqs)
seqs
seqs <- list(list(seqC),seqs)
seqs
seqs[1] <- seqC
seqs
rm(seqs)
seqs <- list(seqA,seqB)
seqs <- list(list(seqC),seqs)
seqs
seqs <- list(seqA,seqB)
seqs <- c(c=seqC,seq)
seqs
seqs <- list(seqA,seqB)
seqs <- c(c=seqC,seqs)
seqs
seqs <- list(seqA,seqB)
seqs <-append(seqs,seqC)
seqs
seqA <- "ACATAGCATGCA"
seqs
seqB <- "CACTGTG"
seqs <- list(seqA,seqB)
seqs <-append(seqs,seqC)
seqs
names(seqs) <- c("seqA","seqB","seqC")
seqs
seqDSS <- DNAStringSet(seqs)
seqDSS <- DNAString(seqs)
seqB <- DNAString("CACTGTG")
seqA <- DNAString("CACTGTGagagatgatga")
seqC <- DNAString("actaccccccc")
seqs <- list(seqA,seqB)
seqs <-append(seqs,seqC)
names(seqs) <- c("seqA","seqB","seqC")
seqDSS <- DNAString(seqs)
seqDSS <- DNAStringSet(seqs)
seqDSS
write.DNAStringSet(seqDSS,"./temp.fasta",format = "fasta")
write.XStringSet(seqDSS,"./temp.fasta",format = "fasta")
writeXStringSet(seqDSS,"./temp.fasta",format = "fasta")
?"append"
seqD <- "acatga"
seqs[["seqD"]] <- seqD
seqs
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
########FUNCTIONS
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refRS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
########
#ena_exp <- tbl(db,"ena_experiment")
#sample_accs <- filter(ena_exp,study_accession == "PRJNA239001") %>% select(sample_accession)
#open tables
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
sample_names <- collect(tread_samples)
sample_names
create_string_set(N315,N315.df,sample_names$strain)
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
create_string_set(N315,N315.df,sample_names$strain)
debugSource('~/staphopia.com/R_scripts_db_analysis/staphopia_phylogeny.R', echo=TRUE)
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(ref,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
create_string_set(N315,N315.df,sample_names$strain)
rm(temp.df)
rm(temp2.df)
rm(temp3)
create_string_set(N315,N315.df,sample_names$strain)
refDS
temp2.df$ct
temp2.df$alternate_base
?replaceLetterAt
create_string_set(N315,N315.df,sample_names$strain)
temp3 <- replaceLetterAt(N315,temp2.df$ct,temp2.df$alternate_base)
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
debugSource('~/staphopia.com/R_scripts_db_analysis/staphopia_phylogeny.R', echo=TRUE)
create_string_set(N315,N315.df,sample_names$strain)
View(temp2.df)
temp3
create_string_set(N315,N315.df,sample_names$strain)
create_string_set(N315,N315.df,sample_names$strain)
source('~/staphopia.com/R_scripts_db_analysis/staphopia_phylogeny.R', echo=TRUE)
names(seqDSS)
names(seqDSS)[1]
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
########FUNCTIONS
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
########
#ena_exp <- tbl(db,"ena_experiment")
#sample_accs <- filter(ena_exp,study_accession == "PRJNA239001") %>% select(sample_accession)
#open tables
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
# download reference DNA string  (note, its already ordered by reference position)
N315.df <- select(ref_pos,reference_base,snp_id) %>% collect()
assert_that(not_empty(N315.df))
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
names(seqDSS)[1] <- "N315_ref"
writeXStringSet(seqDSS,"./aligned_Sa.fasta",format = "fasta")
seqDSS
str(seqDSS)
seqDSSet <- DNAStringSet(seqDSS)
writeXStringSet(seqDSS,"./aligned_Sa.fasta",format = "fasta")
writeXStringSet(seqDSSet,"./aligned_Sa.fasta",format = "fasta")
