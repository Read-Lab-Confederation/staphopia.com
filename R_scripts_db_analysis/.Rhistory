View(temp2.df)
temp3
create_string_set(N315,N315.df,sample_names$strain)
create_string_set(N315,N315.df,sample_names$strain)
source('~/staphopia.com/R_scripts_db_analysis/staphopia_phylogeny.R', echo=TRUE)
names(seqDSS)
names(seqDSS)[1]
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
########FUNCTIONS
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
########
#ena_exp <- tbl(db,"ena_experiment")
#sample_accs <- filter(ena_exp,study_accession == "PRJNA239001") %>% select(sample_accession)
#open tables
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
# download reference DNA string  (note, its already ordered by reference position)
N315.df <- select(ref_pos,reference_base,snp_id) %>% collect()
assert_that(not_empty(N315.df))
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
names(seqDSS)[1] <- "N315_ref"
writeXStringSet(seqDSS,"./aligned_Sa.fasta",format = "fasta")
seqDSS
str(seqDSS)
seqDSSet <- DNAStringSet(seqDSS)
writeXStringSet(seqDSS,"./aligned_Sa.fasta",format = "fasta")
writeXStringSet(seqDSSet,"./aligned_Sa.fasta",format = "fasta")
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
anal_var_toindel_tab <- tbl(db,"analysis_varianttoindel") %>%
select(id,indel_id,variant_id)
anal_var_toindel_tab
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id"))
indel_ids_tread <-inner_join(anal_var_toindel_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
indel_list <- select(indel_ids_tread,indel_id) %>% group_by(indel_id) %>% filter(row_number() == 1)
anal_variantindel <- tbl(db,"analysis_variantindel") %>%
select(id,alternate_base,reference_base,reference_position,is_deletion)
indel_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "indel_id"))
indel_pos <- inner_join(anal_variantindel,snp_id_list, by = c("id" = "indel_id"))
indel_pos <- inner_join(anal_variantindel,indel_list, by = c("id" = "indel_id"))
indel.df <- select(indel_pos,reference_base,snp_id) %>% collect()
indel.df <- select(indel_pos,reference_base,indel_id) %>% collect()
View(indel.df)
indel.df <- select(indel_pos,reference_position,indel_id) %>% collect()
View(indel.df)
View(N315.df)
cleaned_pos <- filter(ref_pos,reference_position !(%in% (indel_pos$reference_position)))
cleaned_pos <- filter(ref_pos,reference_position !(%in% indel_pos$reference_position)
cleaned_pos <- filter(ref_pos,reference_position !%in% indel_pos$reference_position)
cleaned_pos <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position))
N315.df <- select(cleaned_pos,reference_base,snp_id) %>% collect()
cleaned_pos
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id")) %>% collect()
indel_pos <- inner_join(anal_variantindel,indel_list, by = c("id" = "indel_id")) %>% collect()
cleaned_pos <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position))
N315.df <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position)) %>%
select(reference_base,snp_id)
x <- system.time()
?system.time
N315.df <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position)) %>%
select(reference_base,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#indel.df <- select(indel_pos,reference_position,indel_id) %>% collect()
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
system.time(seqDSS <- create_string_set(N315,N315.df,sample_names$strain))
## tidy up and output
names(seqDSS)[1] <- "N315_ref"
seqDSSet <- DNAStringSet(seqDSS)
writeXStringSet(seqDSSet,"./aligned_Sa.fasta",format = "fasta")
N315.df <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position)) %>%
select(reference_base,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#indel.df <- select(indel_pos,reference_position,indel_id) %>% collect()
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
## tidy up and output
names(seqDSS)[1] <- "N315_ref"
seqDSSet <- DNAStringSet(seqDSS)
writeXStringSet(seqDSSet,"./aligned_Sa.fasta",format = "fasta")
N315.df <- select(ref_pos,reference_base,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#indel.df <- select(indel_pos,reference_position,indel_id) %>% collect()
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
seqDSSet
pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position))
pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position)
View(N315.df)
N315.df <- select(ref_pos,reference_base,reference_position,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#indel.df <- select(indel_pos,reference_position,indel_id) %>% collect()
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
?replaceLetterAt
seqs
replaceLetterAt(seqs,c(1,3),"")
replaceLetterAt(DNAStringSet(seqs),c(1,3),"")
replaceLetterAt(DNAStringSet(seqA,seqB,seqC),c(1,3),"")
replaceLetterAt(seqA,c(1,3),"")
seqA
seqA[1] <- ""
pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position)
pos_to_be_removed
replaceLetterAt(seqA,c(1,3),"_")
replaceLetterAt(seqA,c(1),"_")
replaceLetterAt(seqA,c(1),"")
replaceLetterAt(seqA,c(1),".")
replaceLetterAt(seqA,c(1,3),".")
replaceLetterAt(seqA,c(1,3),c(".","."))
View(pos_to_be_removed)
rep(".",34)
length(pos_to_be_removed)
length(pos_to_be_removed$ct)
cleaned_DSS <- replaceLetterAt(seqDSSet,pos_to_be_removed$ct,rep(".",length(pos_to_be_removed$ct)))
pos_to_be_removed$ct
cleaned_DSS <- replaceLetterAt(seqDSSet,at = pos_to_be_removed$ct,letter = rep(".",length(pos_to_be_removed$ct)))
?replace
x <- "abcdefghijklm"
x[c(2,4)] <- ""
x
x <- "abcdefghijklm"
x[2,4] <- ""
x[2]
replace(x,2,"")
x <- "abcdefghijklm"
x
replace(x,2,"")
tread_samples
temp <- create_string_set(N315,N315.df,"NRS218")
N315.df <- filter(N315.df,reference_position %in% indel_pos$reference_position) %>%
select(reference_base,reference_position,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position)
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
N315.df <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position)) %>%
select(reference_base,reference_position,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position)
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
library("dplyr")
library("Biostrings")
library("assertthat")
source("~/.staphopia_logon.R")
db <- staphopia_logon()
########FUNCTIONS
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id)
alt.df <- inner_join(ids,ref_pos, by = "snp_id") %>% select(snp_id,alternate_base) %>% collect()
return(alt.df)
}
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
make_indel_deletions <- function(dna_str,posits) {
new_str <- replace
return(newstring)
}
########
#ena_exp <- tbl(db,"ena_experiment")
#sample_accs <- filter(ena_exp,study_accession == "PRJNA239001") %>% select(sample_accession)
#open tables
samples_tab <-tbl(db,"samples_sample")
anal_var_tab <-tbl(db,"analysis_variant")
anal_var_tosnp_tab <- tbl(db,"analysis_varianttosnp") %>%
select(id,quality,comment_id,snp_id,variant_id)
anal_variantSNP <- tbl(db,"analysis_variantsnp") %>%
select(id,alternate_base,reference_base,reference_position)
anal_var_toindel_tab <- tbl(db,"analysis_varianttoindel") %>%
select(id,indel_id,variant_id)
anal_variantindel <- tbl(db,"analysis_variantindel") %>%
select(id,alternate_base,reference_base,reference_position,is_deletion)
#find all the SNPs from all the projects tagged with NARSA
tread_samples <-filter(samples_tab, sql("comments ILIKE '%NARSA%'")) %>% #note dplyr cant do ILIKE or LIKE statements so need to substitute sql
select(id,strain)
anal_var_tab_tread <- inner_join(tread_samples,anal_var_tab, by = c("id" = "sample_id")) %>%
select(id.y,strain)  # note - could also filter here for the veriosn number
snp_ids_tread <-inner_join(anal_var_tosnp_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
# identity the minimal set and the SNPs involved
snp_id_list <- select(snp_ids_tread,snp_id) %>% group_by(snp_id) %>% filter(row_number() == 1)
ref_pos <- inner_join(anal_variantSNP,snp_id_list, by = c("id" = "snp_id")) %>% collect()
#similarly, find all the indels and get the minimal set
indel_ids_tread <-inner_join(anal_var_toindel_tab,anal_var_tab_tread, by = c("variant_id" = "id.y"))
indel_list <- select(indel_ids_tread,indel_id) %>% group_by(indel_id) %>% filter(row_number() == 1)
indel_pos <- inner_join(anal_variantindel,indel_list, by = c("id" = "indel_id")) %>% collect()
#
#remove all snps that are i the asme referecne position as an indel
N315.df <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position)) %>%
select(reference_base,reference_position,snp_id)
assert_that(not_empty(N315.df))
#now identify all snps that overlap with indels
#pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position)
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
## tidy up and output
names(seqDSS)[1] <- "N315_ref"
N315
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
make_in
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
debugSource('~/staphopia.com/R_scripts_db_analysis/staphopia_phylogeny.R', echo=TRUE)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
ids
cleaned_pos <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position))
N315.df <-  select(cleaned_pos,reference_base,reference_position,snp_id)
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[3] <- "ct"
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
pull_SNPs_by_strain <-function(strain_name){
ids <- filter(snp_ids_tread,strain == strain_name) %>% select(snp_id) %>% collect()
alt.df <- inner_join(ids,cleaned_pos, by = "snp_id") %>% select(snp_id,alternate_base)
return(alt.df)
}
create_string_set <- function(refDS,ref.df,strains) {
DSS <-list(refDS)
for (strain in strains) {
temp.df <- pull_SNPs_by_strain(strain)
temp2.df <- inner_join(ref.df,temp.df, by = "snp_id") %>% select(ct,alternate_base,snp_id)
temp3 <- replaceLetterAt(refDS,temp2.df$ct,temp2.df$alternate_base)
DSS <- append(DSS,temp3)
}
names(DSS) <- c("reference",strains)
return(DSS)
}
N315
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
View(cleaned_pos)
tread_samples
temp ids <- filter(snp_ids_tread,strain == "NRS218") %>% select(snp_id) %>% collect()
tempids <- filter(snp_ids_tread,strain == "NRS218") %>% select(snp_id) %>% collect()
tempids
tempid2 <- inner_join(tempids,cleaned_pos, by = "snp_id") %>% select(snp_id,alternate_base)
tempid2
source('~/staphopia.com/R_scripts_db_analysis/staphopia_phylogeny.R', echo=TRUE)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
cleaned_pos
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
ref.df
head(ref.df)
N315.df
View(N315.df)
cleaned_pos <- filter(ref_pos,!(reference_position %in% indel_pos$reference_position))
N315.df <-  select(cleaned_pos,reference_base,reference_position,snp_id)
View(N315.df)
View(cleaned_pos)
N315.df <- cbind(N315.df,1:nrow(N315.df)) #add explicit row number
colnames(N315.df)[4] <- "ct"
View(N315.df)
N315 <- DNAString(paste(N315.df$reference_base,sep = "",collapse = ""))
### now pull down the SNPs for the individual strains and replace
sample_names <- collect(tread_samples)
seqDSS <- create_string_set(N315,N315.df,sample_names$strain)
names(seqDSS)[1] <- "N315_ref"
seqDSSet <- DNAStringSet(seqDSS)
##now remove te indels
#pos_to_be_removed <- filter(N315.df,reference_position %in% indel_pos$reference_position)
writeXStringSet(seqDSSet,"./aligned_Sa.fasta",format = "fasta")
seqDSSet
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids(strain_name = "tim")
(strain_name,comments,project,ids)
c(strain_name,comments,project,ids)
a = ""
b = ""
c = ""
c(a,b,c)
sum(c(a,b,c))
is_empty(c(a,b,c))
library(assertthat)
is_empty(c(a,b,c))
isTRUE(c(a,b,c))
a= 1
isTRUE(c(a,b,c))
c(a,b,c)
not_empty(c(a,b,c))
a= ""
not_empty(c(a,b,c))
is.null(a)
is.null(b)
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
a = NA
b = NA
c = NA
is.na(a)
!is.na(a)
is.na(c(a,b,c))
sum(is.na(c(a,b,c)))
sum(!is.na(c(a,b,c)))
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids()
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids()
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids()
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids()
pull_ids(strain_name = "time")
?assert_that
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids(strain_name = "time")
pull_ids(strain_name = "time",mlst = "34")
a = 1
as.character(a)
b
as.character(b)
(a,b,c) <- as.character(a,b,c)
(a) <- as.character(a)
a,b,c <- as.character(a,b,c)
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
strain_name
strain_name = "tim"
paste("", sep = "comments ILIKE '%",strain_name, "%'"",sep = "", COLLAPSE = TRUE)
paste("", sep = "comments ILIKE \'%",strain_name, "%\'",sep = "", COLLAPSE = TRUE)
paste("comments ILIKE \'%",strain_name, "%\'",sep = "", COLLAPSE = TRUE)
paste("comments ILIKE \'%",strain_name, "%\'",sep = "")
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source("~/.staphopia_logon.R")
db <- staphopia_logon()
pull_ids(comments = "NARSA")
pull_ids(db, comments = "NARSA")
pull_ids(db, strain = "NRS")
pull_ids(db, strain = "RS")
pull_ids(db, strain = "MRSA")
pull_ids(db, strain = "GA")
pull_ids(db, comments = "GA")
mlst_tab <- tbl(db,"analysis_mlst")
mlst_tab
mlstsrst2_tab <- tbl(db,"analysis_mlstsrst2")
mlstsrst2_tab
pipelineversion_tab <- tbl(db,"analysis_pipelineversion")
pipelineversion_tab
summarise(pipelineversion_tab, mlst = max)
summarise(pipelineversion_tab, max(mlst))
filter(pipelineversion_tab, module=mlst)
filter(pipelineversion_tab, module== "mlst")
filter(pipelineversion_tab, module== "mlst") %>% summarise(max(id))
filter(pipelineversion_tab, module== "mlst") %>% summarise(max(id))%>% collect()
p <- filter(pipelineversion_tab, module== "mlst") %>% summarise(max(id))%>% collect()
p
str(p)
as.integer(p)
p <- filter(pipelineversion_tab, module== "mlst") %>% summarise(max(id))%>% collect() %>% as.integer()
p
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
inner_join(samples_tab,mlst, by = c("id" = "sample_id"))
inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))
samples_tab <-tbl(db,"samples_sample")
inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))
inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(id.x,sample_tag,comments,strain,id.y)
mlst_strain_tab <- inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(id.x,sample_tag,comments,strain,id.y)
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
innerjoin(mlst_strain_tab,mlstsrst2_tab, by = c("id.y" = "mlst"))
inner_join(mlst_strain_tab,mlstsrst2_tab, by = c("id.y" = "mlst"))
mlstsrst2_tab
inner_join(mlst_strain_tab,mlstsrst2_tab, by = c("id.y" = "mlst_id"))
mlst_strain_tab <- inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(sample_id,sample_tag,comments,strain,id.y)
mlst_strain_tab
inner_join(mlst_strain_tab,mlstsrst2_tab, by = c("id.y" = "mlst_id")) %>% select(sample_id,sample_tag,comments,strain,ST)
mlst_strain_tab <- inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(sample_id,sample_tag,comments,strain,id.y) %>% filter(ST == 5)
mlst_strain_tab <- inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(sample_id,sample_tag,comments,strain,id.y) %>% filter(ST == 8)
mlst_strain_tab <- inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(sample_id,sample_tag,comments,strain,id.y) %>% filter(ST == "8")
mlst_strain_tab <- inner_join(samples_tab,mlst_tab, by = c("id" = "sample_id"))  %>% select(sample_id,sample_tag,comments,strain,id.y) %>% filter(ST == "5")
filter(mlstsrst2_tab,ST == "8")
inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = "mlst_id"))
inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = "mlst_id")) %>% filter(version_id = 26)
inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = "mlst_id")) %>% filter(version_id == "26")
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
mlst_ST_tab <- inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = mlstpl)) %>% filter(version_id == "26")
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
mlst_ST_tab <- inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = mlstpl)) %>% filter(version_id == "26")
mlst_ST_tab <- inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = mlstpl)) %>% filter(version_id == "26")
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
mlst_ST_tab <- inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = "mlst_id")) %>% filter(version_id == mlstpl)
mlst_ST_tab <- inner_join(mlst_tab,mlstsrst2_tab, by = c("id" = "mlst_id")) %>% filter(version_id == "26")
mlst_ST_tab
left_join(samples_tab,mlst_ST_tab, by = c("id" = "samples_id"))
left_join(samples_tab,mlst_ST_tab, by = c("id" = "sample_id"))
left_join(samples_tab,mlst_ST_tab, by = c("id" = "sample_id")) %>% select(id, sample_tag, comments,strain, ST)
mlst_strain_tab <- left_join(samples_tab,mlst_ST_tab, by = c("id" = "sample_id")) %>% select(id, sample_tag, comments,strain, ST)
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids(db,strain_name = "NRS")
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids(db,strain_name = "NRS")
pull_ids(db,comments = "NARSA")
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
pull_ids(db,STtype = "8")
pull_ids(db,STtype = "239")
pull_ids(db,STtype = "51")
filter(mlstsrst2_tab,ST=="51")
filter(mlst_tab, id == 3190)
filter(mlst_tab, id == 3274)
pull_ids(db,STtype = "51") %>% select(strain,ST)
P <- pull_ids(db,STtype = "51")
P
glimpse(P)
source('~/staphopia.com/R_scripts_db_analysis/pull_ids.R')
