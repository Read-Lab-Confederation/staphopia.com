""" Insert PROKKA output into the database. """
from django.core.management.base import BaseCommand, CommandError

from gene.models import ReferenceMapping, Clusters
from variant.models import Reference, Annotation


class Command(BaseCommand):
    help = 'Insert annotated gene info generated by PROKKA into the database.'

    def add_arguments(self, parser):
        parser.add_argument('reference', metavar='REFERENCE',
                            help='Name of the reference.')
        parser.add_argument('blastp', metavar='BLASTP',
                            help=('BLASTP output of Prokka proteins against '
                                  'the reference proteins'))
        parser.add_argument('gff', metavar='GFF3_GZIP',
                            help=('PROKKA annotations in GFF3 format (output '
                                  'with .gff extension)'))

    def handle(self, *args, **opts):
        # Get Reference
        try:
            reference = Reference.objects.get(name=opts['reference'])
        except Reference.DoesNotExist:
            raise CommandError(
                    'Reference does not exist, please load the reference.'
                )

        # Reference Annotations
        annotations = self.get_annotation_ids(reference)

        # Read BLASTP output
        prokka_to_ref = {}
        with open(opts['blastp'], 'r') as fh:
            for line in fh:
                cols = line.split('\t')
                prokka_to_ref[cols[1]] = cols[0]

        # Read GFF3 File and insert features
        prokka_to_uniref = self.read_gff(opts['gff'])

        for prokka_id, protein_id in prokka_to_ref.items():
            annotation_obj = annotations[protein_id]
            cluster_obj = Clusters.objects.get(
                name=prokka_to_uniref[prokka_id]
            )

            ref, created = ReferenceMapping.objects.get_or_create(
                reference=reference,
                annotation=annotation_obj,
                cluster=cluster_obj
            )

            print("{0} mapped to {1}\t{2}".format(
                protein_id,
                prokka_to_uniref[prokka_id],
                created
            ))

    def get_annotation_ids(self, reference):
        """Return the primary key of each protein_id."""
        annotations = {}
        for annotation in Annotation.objects.filter(reference=reference):
            annotations[annotation.protein_id] = annotation
        return annotations

    def read_gff(self, gff_file):
        """Read through the GFF and extract annotations."""
        prokka_to_uniref = {}
        types = ['CDS', 'tRNA', 'rRNA']

        done_reading = False
        with open(gff_file, 'r') as fh:
            for line in fh:
                if done_reading:
                    continue
                line = line.rstrip()
                if line.startswith('##'):
                    # Don't need these lines
                    if line.startswith('##FASTA'):
                        # Done, process no more
                        done_reading = True
                    continue
                else:
                    '''
                    Parse the feature
                    Columns: 0:contig       3:start       6:strand
                             1:source       4:end         7:phase
                             2:type         5:score       8:attributes

                    Example: Attribute
                    ID=PROKKA_00001;
                    Parent=PROKKA_00001_gene;
                    inference=ab initio prediction:Prodigal:2.6,similar to AA
                              sequence:RefSeq:UniRef90_A0A0D1GFR5;
                    locus_tag=PROKKA_00001;
                    product=Strain SA-120 Contig630%2C whole genome shotgun
                            sequence;
                    protein_id=gnl|PROKKA|PROKKA_00001
                    '''
                    # Only parse those features of type in types
                    cols = line.split('\t')
                    if cols[2] in types:
                        # Parse attributes
                        cluster = 'no-matching-cluster'

                        attributes = dict( a.split('=') for a in cols[8].split(';'))
                        prokka_id = attributes['ID']
                        if 'inference' in attributes:
                            if 'UniRef50_' in attributes['inference']:
                                cluster = 'UniRef50_{0}'.format(
                                    attributes['inference'].split('UniRef50_')[1]
                                )

                        if cols[2] in ['tRNA', 'rRNA']:
                            cluster = 'predicted-rna'

                        prokka_to_uniref[prokka_id] = cluster

        return prokka_to_uniref
