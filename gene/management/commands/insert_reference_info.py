""" Insert PROKKA output into the database. """
# from django.db import connection, transaction
from django.db.utils import IntegrityError
from django.core.management.base import BaseCommand, CommandError

from staphopia.utils import timeit, gziplines, read_fasta
from sample.models import MetaData
from gene.models import Clusters, ReferenceSequence, References
from variant.models import Reference


class Command(BaseCommand):
    help = 'Insert annotated gene info generated by PROKKA into the database.'

    def add_arguments(self, parser):
        parser.add_argument('reference', metavar='REFERENCE',
                            help='Name of the reference.')
        parser.add_argument('gff', metavar='GFF3_GZIP',
                            help=('PROKKA annotations in GFF3 format (output '
                                  'with .gff.gz extension)'))
        parser.add_argument('contigs', metavar='FNA_GZIP',
                            help=('Assembled contigs renamed by PROKKA (output'
                                  ' with .fna.gz extension)'))
        parser.add_argument('genes', metavar='FFN_GZIP',
                            help=('Predicted gene sequences from PROKKA ('
                                  'output with .ffn.gz extension)'))
        parser.add_argument('proteins', metavar='FAA_GZIP',
                            help=('Predicted protein sequences from PROKKA ('
                                  'output with .faa.gz extension)'))
        parser.add_argument('uniref90', metavar='UNIREF90_TAB',
                            help=('All UniRef90 protein sequences in '
                                  'compressed tab delimited format '
                                  '(name\tsequence)'))

    def handle(self, *args, **opts):
        # Get MetaData instance
        try:
            self.reference = Reference.objects.get(name=opts['reference'])
        except MetaData.DoesNotExist:
            raise CommandError('sample_tag {0} does not exist'.format(
                opts['sample_tag']
            ))

        # Read Fasta files
        self.contigs = read_fasta(opts['contigs'], compressed=True)
        self.genes = read_fasta(opts['genes'], compressed=True)
        self.proteins = read_fasta(opts['proteins'], compressed=True)
        self.uniref90 = opts['uniref90']

        # Insert contigs to database
        self.contig_pks = self.insert_contigs()

        # Read GFF3 File and insert features
        features = self.read_gff(opts['gff'])
        References.objects.bulk_create(features, batch_size=500)

    @timeit
    def insert_contigs(self):
        pks = {}
        for name, sequence in self.contigs.items():
            try:
                contig, created = ReferenceSequence.objects.get_or_create(
                    reference=self.reference,
                    name=name,
                    sequence=sequence
                )
                pks[name] = contig.pk
            except IntegrityError as e:
                raise CommandError('Error inserting contigs: {0}'.format(e))

        return pks

    def get_cluster_pk(self, cluster):
        try:
            cluster = Clusters.objects.get(name=cluster)
        except Clusters.DoesNotExist:
            from subprocess import Popen, PIPE
            print cluster
            f = Popen(['grep', cluster, self.uniref90], stdout=PIPE)
            stdout, stderr = f.communicate()
            name, seq = stdout.rstrip().split('\t')
            cluster = Clusters.objects.create(name=name, aa=seq)
        return cluster.pk

    @timeit
    def read_gff(self, gff_file):
        features = []
        types = ['CDS', 'tRNA']

        for line in gziplines(gff_file):
            if line.startswith('##'):
                # Don't need these lines
                if line.startswith('##FASTA'):
                    # Don't read the sequence
                    break
                continue
            else:
                '''
                Parse the feature
                Columns: 0:contig       3:start       6:strand
                         1:source       4:end         7:phase
                         2:type         5:score       8:attributes

                Example: Attribute
                ID=PROKKA_00001;
                Parent=PROKKA_00001_gene;
                inference=ab initio prediction:Prodigal:2.6,similar to AA
                          sequence:RefSeq:UniRef90_A0A0D1GFR5;
                locus_tag=PROKKA_00001;
                product=Strain SA-120 Contig630%2C whole genome shotgun
                        sequence;
                protein_id=gnl|PROKKA|PROKKA_00001
                '''
                # Only parse those features of type in types
                cols = line.split('\t')
                if cols[2] in types:
                    # Parse attributes
                    cluster = 'NO_MATCHING_CLUSTER'
                    id = None
                    for attribute in cols[8].split(';'):
                        if attribute.startswith('ID'):
                            id = attribute.split('=')[1]
                        elif attribute.startswith('inference'):
                            if 'UniRef90_' in attribute:
                                cluster = 'UniRef90_{0}'.format(
                                    attribute.split('UniRef90_')[1]
                                )

                    features.append(
                        References(
                            reference=self.reference,
                            contig_id=self.contig_pks[cols[0]],
                            cluster_id=self.get_cluster_pk(cluster),

                            start=int(cols[3]),
                            end=int(cols[4]),
                            is_positive=True if cols[6] == '+' else False,
                            is_tRNA=True if cols[2] == 'tRNA' else False,
                            phase=int(cols[7]),

                            dna=self.genes[id] if id in self.genes else '',
                            aa=self.proteins[id] if id in self.proteins else '',
                        )
                    )

        return features
