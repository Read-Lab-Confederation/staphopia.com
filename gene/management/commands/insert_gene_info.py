"""Insert PROKKA output into the database."""
from django.db import transaction
from django.core.management.base import BaseCommand

from sample.tools import get_sample
from gene.tools import insert_gene_annotations


class Command(BaseCommand):
    """Insert gene annotations into the database."""

    help = 'Insert annotated gene info generated by PROKKA into the database.'

    def add_arguments(self, parser):
        """Command line arguements."""
        parser.add_argument('sample_tag', metavar='SAMPLE_TAG',
                            help='Sample tag of the data.')
        parser.add_argument('gff', metavar='GFF3_GZIP',
                            help=('PROKKA annotations in GFF3 format (output '
                                  'with .gff.gz extension)'))
        parser.add_argument('contigs', metavar='FNA_GZIP',
                            help=('Assembled contigs renamed by PROKKA (output'
                                  ' with .fna.gz extension)'))
        parser.add_argument('genes', metavar='FFN_GZIP',
                            help=('Predicted gene sequences from PROKKA ('
                                  'output with .ffn.gz extension)'))
        parser.add_argument('proteins', metavar='FAA_GZIP',
                            help=('Predicted protein sequences from PROKKA ('
                                  'output with .faa.gz extension)'))
        parser.add_argument('uniref90', metavar='UNIREF90_TAB',
                            help=('All UniRef90 protein sequences in '
                                  'compressed tab delimited format '
                                  '(name\tsequence)'))

    @transaction.atomic
    def handle(self, *args, **opts):
        """Insert gene annotations into the database."""
        sample = get_sample(opts['sample_tag'])
        insert_gene_annotations(opts, sample)
