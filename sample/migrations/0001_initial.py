# Generated by Django 2.0 on 2017-12-07 19:17

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SampleSummary',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('sample_id', models.IntegerField(blank=True, null=True)),
                ('is_paired', models.NullBooleanField()),
                ('is_public', models.NullBooleanField()),
                ('is_published', models.NullBooleanField()),
                ('sample_tag', models.TextField(blank=True, null=True)),
                ('document', models.TextField(blank=True, null=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('contains_ena_metadata', models.NullBooleanField()),
                ('study_accession', models.TextField(blank=True, null=True)),
                ('study_title', models.TextField(blank=True, null=True)),
                ('study_alias', models.TextField(blank=True, null=True)),
                ('secondary_study_accession', models.TextField(blank=True, null=True)),
                ('sample_accession', models.TextField(blank=True, null=True)),
                ('secondary_sample_accession', models.TextField(blank=True, null=True)),
                ('submission_accession', models.TextField(blank=True, null=True)),
                ('experiment_accession', models.TextField(blank=True, null=True)),
                ('experiment_title', models.TextField(blank=True, null=True)),
                ('experiment_alias', models.TextField(blank=True, null=True)),
                ('tax_id', models.IntegerField(blank=True, null=True)),
                ('scientific_name', models.TextField(blank=True, null=True)),
                ('instrument_platform', models.TextField(blank=True, null=True)),
                ('instrument_model', models.TextField(blank=True, null=True)),
                ('library_layout', models.TextField(blank=True, null=True)),
                ('library_strategy', models.TextField(blank=True, null=True)),
                ('library_selection', models.TextField(blank=True, null=True)),
                ('center_name', models.TextField(blank=True, null=True)),
                ('center_link', models.TextField(blank=True, null=True)),
                ('cell_line', models.TextField(blank=True, null=True)),
                ('collected_by', models.TextField(blank=True, null=True)),
                ('location', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('region', models.TextField(blank=True, null=True)),
                ('coordinates', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('environmental_sample', models.TextField(blank=True, null=True)),
                ('biosample_first_public', models.TextField(blank=True, null=True)),
                ('germline', models.TextField(blank=True, null=True)),
                ('isolate', models.TextField(blank=True, null=True)),
                ('isolation_source', models.TextField(blank=True, null=True)),
                ('serotype', models.TextField(blank=True, null=True)),
                ('serovar', models.TextField(blank=True, null=True)),
                ('sex', models.TextField(blank=True, null=True)),
                ('submitted_sex', models.TextField(blank=True, null=True)),
                ('strain', models.TextField(blank=True, null=True)),
                ('sub_species', models.TextField(blank=True, null=True)),
                ('tissue_type', models.TextField(blank=True, null=True)),
                ('biosample_scientific_name', models.TextField(blank=True, null=True)),
                ('sample_alias', models.TextField(blank=True, null=True)),
                ('checklist', models.TextField(blank=True, null=True)),
                ('biosample_center_name', models.TextField(blank=True, null=True)),
                ('environment_biome', models.TextField(blank=True, null=True)),
                ('environment_feature', models.TextField(blank=True, null=True)),
                ('environment_material', models.TextField(blank=True, null=True)),
                ('project_name', models.TextField(blank=True, null=True)),
                ('host', models.TextField(blank=True, null=True)),
                ('host_status', models.TextField(blank=True, null=True)),
                ('host_sex', models.TextField(blank=True, null=True)),
                ('submitted_host_sex', models.TextField(blank=True, null=True)),
                ('host_body_site', models.TextField(blank=True, null=True)),
                ('investigation_type', models.TextField(blank=True, null=True)),
                ('sequencing_method', models.TextField(blank=True, null=True)),
                ('broker_name', models.TextField(blank=True, null=True)),
                ('rank', models.TextField(blank=True, null=True)),
                ('total_bp', models.BigIntegerField(blank=True, null=True)),
                ('read_total', models.BigIntegerField(blank=True, null=True)),
                ('coverage', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('read_min', models.IntegerField(blank=True, null=True)),
                ('read_mean', models.DecimalField(blank=True, decimal_places=4, max_digits=11, null=True)),
                ('read_median', models.IntegerField(blank=True, null=True)),
                ('read_std', models.DecimalField(blank=True, decimal_places=4, max_digits=11, null=True)),
                ('read_max', models.IntegerField(blank=True, null=True)),
                ('read_25th', models.IntegerField(blank=True, null=True)),
                ('read_75th', models.IntegerField(blank=True, null=True)),
                ('q_score', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('qual_mean', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True)),
                ('qual_std', models.DecimalField(blank=True, decimal_places=4, max_digits=7, null=True)),
                ('qual_25th', models.IntegerField(blank=True, null=True)),
                ('qual_median', models.IntegerField(blank=True, null=True)),
                ('qual_75th', models.IntegerField(blank=True, null=True)),
                ('total_contig', models.SmallIntegerField(blank=True, null=True)),
                ('total_contig_length', models.IntegerField(blank=True, null=True)),
                ('min_contig_length', models.IntegerField(blank=True, null=True)),
                ('median_contig_length', models.IntegerField(blank=True, null=True)),
                ('mean_contig_length', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True)),
                ('max_contig_length', models.IntegerField(blank=True, null=True)),
                ('n50_contig_length', models.IntegerField(blank=True, null=True)),
                ('l50_contig_count', models.SmallIntegerField(blank=True, null=True)),
                ('ng50_contig_length', models.IntegerField(blank=True, null=True)),
                ('lg50_contig_count', models.SmallIntegerField(blank=True, null=True)),
                ('contigs_greater_1k', models.SmallIntegerField(blank=True, null=True)),
                ('contigs_greater_10k', models.SmallIntegerField(blank=True, null=True)),
                ('contigs_greater_100k', models.SmallIntegerField(blank=True, null=True)),
                ('contigs_greater_1m', models.SmallIntegerField(blank=True, null=True)),
                ('percent_contigs_greater_1k', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('percent_contigs_greater_10k', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('percent_contigs_greater_100k', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('percent_contigs_greater_1m', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('contig_percent_a', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('contig_percent_t', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('contig_percent_g', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('contig_percent_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('contig_percent_n', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('contig_non_acgtn', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('num_contig_non_acgtn', models.SmallIntegerField(blank=True, null=True)),
                ('gc_content', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('total_snps', models.IntegerField(blank=True, null=True)),
                ('total_indels', models.IntegerField(blank=True, null=True)),
                ('st_original', models.TextField(blank=True, null=True)),
                ('st_stripped', models.TextField(blank=True, null=True)),
                ('is_exact', models.NullBooleanField()),
            ],
            options={
                'db_table': 'sample_summary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetaData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contains_ena_metadata', models.BooleanField(default=True)),
                ('study_accession', models.TextField(default='')),
                ('study_title', models.TextField(default='', help_text='Title of the study as would be used in a publication.')),
                ('study_alias', models.TextField(default='')),
                ('secondary_study_accession', models.TextField(default='')),
                ('sample_accession', models.TextField(default='')),
                ('secondary_sample_accession', models.TextField(default='')),
                ('submission_accession', models.TextField(default='')),
                ('experiment_accession', models.TextField(default='')),
                ('experiment_title', models.TextField(default='', help_text='Short text that can be used to call out experiment records in searches or in displays.')),
                ('experiment_alias', models.TextField(default='')),
                ('tax_id', models.PositiveIntegerField(default='', help_text='NCBI Taxonomy Identifier.')),
                ('scientific_name', models.TextField(default='', help_text='Scientific name of sample that distinguishes its taxonomy.')),
                ('instrument_platform', models.TextField(default='', help_text='Which sequencing platform and platform-specific runtime parameters.')),
                ('instrument_model', models.TextField(default='', help_text='Specific model of the platform used for sequencing.')),
                ('library_layout', models.TextField(default='', help_text='Single, paired or other configuration of reads.')),
                ('library_strategy', models.TextField(default='', help_text='Sequencing technique intended for this library.')),
                ('library_selection', models.TextField(default='')),
                ('center_name', models.TextField(default='', help_text='Sequencing center that submitted the sample to ENA/SRA')),
                ('center_link', models.TextField(default='', help_text='Sequencing center link that submitted the sample to ENA/SRA')),
                ('first_public', models.DateField(default='', help_text='Date sample was submitted to ENA/SRA.')),
                ('cell_line', models.TextField(default='')),
                ('collected_by', models.TextField(default='')),
                ('collection_date', models.TextField(default='')),
                ('location', models.TextField(default='')),
                ('country', models.TextField(default='')),
                ('region', models.TextField(default='')),
                ('description', models.TextField(default='')),
                ('environmental_sample', models.TextField(default='')),
                ('biosample_first_public', models.TextField(default='')),
                ('germline', models.TextField(default='')),
                ('isolate', models.TextField(default='')),
                ('isolation_source', models.TextField(default='')),
                ('coordinates', models.TextField(default='')),
                ('serotype', models.TextField(default='')),
                ('serovar', models.TextField(default='')),
                ('sex', models.TextField(default='')),
                ('submitted_sex', models.TextField(default='')),
                ('strain', models.TextField(default='')),
                ('sub_species', models.TextField(default='')),
                ('tissue_type', models.TextField(default='')),
                ('biosample_tax_id', models.TextField(default='')),
                ('biosample_scientific_name', models.TextField(default='')),
                ('sample_alias', models.TextField(default='')),
                ('checklist', models.TextField(default='')),
                ('biosample_center_name', models.TextField(default='')),
                ('environment_biome', models.TextField(default='')),
                ('environment_feature', models.TextField(default='')),
                ('environment_material', models.TextField(default='')),
                ('project_name', models.TextField(default='')),
                ('host', models.TextField(default='')),
                ('host_tax_id', models.TextField(default='')),
                ('host_status', models.TextField(default='')),
                ('host_sex', models.TextField(default='')),
                ('submitted_host_sex', models.TextField(default='')),
                ('host_body_site', models.TextField(default='')),
                ('investigation_type', models.TextField(default='')),
                ('sequencing_method', models.TextField(default='')),
                ('broker_name', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='MetaDataHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('field', models.TextField()),
                ('previous', models.TextField()),
                ('current', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly', models.TextField()),
                ('gene', models.TextField()),
                ('kmer', models.TextField()),
                ('mlst', models.TextField()),
                ('sequence', models.TextField()),
                ('variant', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program', models.TextField()),
                ('version', models.TextField()),
                ('comments', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pmid', models.TextField(unique=True)),
                ('authors', models.TextField()),
                ('title', models.TextField()),
                ('abstract', models.TextField(db_index=True)),
                ('reference_ids', models.TextField()),
                ('keywords', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Resistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('antibiotic', models.TextField()),
                ('test', models.TextField()),
                ('unit', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ResistanceSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('susceptible', models.TextField()),
                ('intermediate', models.TextField()),
                ('resistant', models.TextField()),
                ('comment', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_tag', models.TextField(db_index=True, default='')),
                ('is_paired', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(db_index=True, default=True)),
                ('is_published', models.BooleanField(db_index=True, default=False)),
                ('md5sum', models.CharField(default='', max_length=32, unique=True)),
                ('document', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('count', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.TextField(db_index=True)),
                ('comment', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ToPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Publication')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='ToResistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('phenotype', models.TextField()),
                ('resistance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Resistance')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Sample')),
                ('specification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.ResistanceSpecification')),
            ],
        ),
        migrations.CreateModel(
            name='ToTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Sample')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Tag')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='resistancespecification',
            unique_together={('susceptible', 'intermediate', 'resistant', 'comment')},
        ),
        migrations.AlterUniqueTogether(
            name='resistance',
            unique_together={('antibiotic', 'test', 'unit')},
        ),
        migrations.AddField(
            model_name='pipeline',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sample.Sample'),
        ),
        migrations.AddField(
            model_name='metadatahistory',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sample.Sample'),
        ),
        migrations.AddField(
            model_name='metadatahistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='metadata',
            name='sample',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sample.Sample'),
        ),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together={('user', 'tag')},
        ),
        migrations.AddIndex(
            model_name='sample',
            index=django.contrib.postgres.indexes.GinIndex(fields=['document'], name='sample_samp_documen_70686d_gin'),
        ),
    ]
