""" Insert Jellyfish output into the database. """
import sys
import time

from django.db import connection, transaction
from django.core.management.base import BaseCommand

from kmer.models import String
from staphopia.utils import timeit


class Command(BaseCommand):
    help = 'Insert Kmer data generated by Jellyfish into the database.'

    _tables = ['kmer_string']

    def add_arguments(self, parser):
        parser.add_argument('counts', metavar='UNIQ_COUNTS',
                            help='Text file of unique kmers (uniq- c).')
        parser.add_argument('--empty', action='store_true',
                            help='Empty tables and reset counts.')

    def handle(self, *args, **opts):
        if opts['empty']:
            # Empty Tables
            self.empty_tables()
            sys.exit()

        # Read count file
        self.kmers = []
        self.total = 0
        self.singleton = 0
        self.progress_time = time.time()
        print 'Total:Singletons:kmers/second'
        with open(opts['counts'], "r") as f:
            for line in f:
                line = line.strip()
                count, kmer = line.split(' ')

                # Lets skip singletons for now!
                if int(count) > 1:
                    self.kmers.append(kmer)
                    self.total += 1
                    # Process every 100k kmers
                    if self.total % 100000 == 0:
                        self.process_kmers()
                elif int(count) == 1:
                    self.singleton += 1

        # Process the remaining kmers
        self.process_kmers()

    def process_kmers(self):
        String.objects.insert_into_partitions(self.kmers)
        self.progress_time = float(time.time() - self.progress_time)
        print '{0}:{1}:{2}'.format(
            self.total,
            self.singleton,
            int(100000 / self.progress_time)
        )
        self.progress_time = time.time()
        # Empty lists
        del self.kmers[:]

    @transaction.atomic
    def empty_tables(self):
        # Empty Tables and Reset id counters to 1
        for table in self._tables:
            self.empty_table(table)

    def empty_table(self, table):
        query = "TRUNCATE TABLE {0} RESTART IDENTITY CASCADE;".format(table)
        cursor = connection.cursor()
        cursor.execute(query)
