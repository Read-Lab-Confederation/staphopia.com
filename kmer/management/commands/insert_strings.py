""" Insert Jellyfish output into the database. """
import sys
import time

from bitarray import bitarray

from django.db import connection, transaction
from django.core.management.base import BaseCommand

from kmer.models import KmerBinary


class Command(BaseCommand):
    help = 'Insert Kmer data generated by Jellyfish into the database.'

    _code = {
        'A': bitarray('01'),
        'C': bitarray('11'),
        'G': bitarray('00'),
        'T': bitarray('10')
    }

    _tables = ['kmer_kmerbinary']

    def add_arguments(self, parser):
        parser.add_argument('jellyfish', metavar='JELLYFISH_COUNTS',
                            help=('Compressed (gzip) Jellyfish counts to be '
                                  'inserted.'))
        parser.add_argument('--empty', action='store_true',
                            help='Empty tables and reset counts.')

    def handle(self, *args, **opts):
        if opts['empty']:
            # Empty Tables
            self.empty_tables()
            sys.exit()

        # Read Jellyfish file
        self.read_jellyfish_counts(opts['jellyfish'])

    def encode(self, seq):
        a = bitarray()
        a.encode(self._code, seq)
        return a.tobytes()

    def decode(self, seq):
        a = bitarray()
        a.frombytes(seq)
        return a.decode(self._code)[0:31]

    def read_jellyfish_counts(self, jellyfish_file):
        # Inititalize values
        self.kmer_binary = []
        total = 0
        new_mers = 0
        start_time = time.time()

        fh = open(jellyfish_file)
        for line in fh:
            if total % 1000000 == 0 and total > 0:
                new_mers += self.insert_kmer()
                runtime = int(time.time() - start_time)
                print "{0:,}\t{1:,}\t{2}".format(total, new_mers, runtime)
                new_mers = 0
                start_time = time.time()

            word, count = line.rstrip().split(' ')
            self.kmer_binary.append(word)
            total += 1

        # Process remaining kmers and insert totals
        print "{0}\t{1}".format(total, self.insert_kmer())

    def encode_words(self, words):
        # Encode kmers
        return [self.encode(word) for word in words]

    def insert_kmer(self):
        # Insert bit encoded kmers
        new_kmers = KmerBinary.objects.bulk_create_new(
            self.encode_words(self.kmer_binary)
        )
        self.kmer_binary = []

        return new_kmers

    @transaction.atomic
    def empty_tables(self):
        # Empty Tables and Reset id counters to 1
        for table in self._tables:
            self.empty_table(table)
            self.reset_counter(table)

    def empty_table(self, table):
        cursor = connection.cursor()
        cursor.execute("TRUNCATE TABLE {0} CASCADE;".format(table))

    def reset_counter(self, table):
        query = ("SELECT setval(pg_get_serial_sequence('{0}', 'id'), "
                 "coalesce(max(id),0) + 1, false) FROM {0};").format(table)
        cursor = connection.cursor()
        cursor.execute(query)
