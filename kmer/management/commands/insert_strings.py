""" Insert Jellyfish output into the database. """
import psycopg2
import sys

from bitarray import bitarray

from django.db import connection, transaction
from django.core.management.base import BaseCommand

from staphopia.utils import timeit


class Command(BaseCommand):
    help = 'Insert Kmer data generated by Jellyfish into the database.'

    _code = {
        'A': bitarray('01'),
        'C': bitarray('11'),
        'G': bitarray('00'),
        'T': bitarray('10')
    }

    _tables = ['kmer_binarytemporary']

    def add_arguments(self, parser):
        parser.add_argument('counts', metavar='UNIQ_COUNTS',
                            help='Text file of unique kmers (uniq- c).')
        parser.add_argument('--empty', action='store_true',
                            help='Empty tables and reset counts.')

    def handle(self, *args, **opts):
        if opts['empty']:
            # Empty Tables
            self.empty_tables()
            sys.exit()

        # Read count file
        self.kmers = []
        total = 0
        singleton = 0
        with open(opts['counts'], "r") as f:
            for line in f:
                line = line.strip()
                count, kmer = line.split(' ')

                self.kmers.append(kmer)
                total += 1

                if int(count) == 1:
                    singleton += 1

                # Process every 100k kmers
                if total % 100000 == 0:
                    print '{0}\t{1}'.format(total, singleton)
                    self.process_kmers()

        # Process the remaining kmers
        print '{0}\t{1}'.format(total, singleton)
        self.process_kmers()

    def encode(self, seq):
        a = bitarray()
        a.encode(self._code, seq)
        return a.tobytes()

    @timeit
    def process_kmers(self):
        self.insert_kmer()

        # Empty lists
        del self.kmers[:]

    def encode_words(self, words):
        # Encode kmers
        return [self.encode(word) for word in words]

    @transaction.atomic
    def insert_kmer(self):
        # Insert bit encoded kmers
        values = [
            '({0})'.format(psycopg2.Binary(k))
            for k in self.encode_words(self.kmers)
        ]

        sql = """INSERT INTO kmer_binarytemporary (string)
                 VALUES {0};""".format(','.join(values))
        cursor = connection.cursor()
        cursor.execute(sql)

    @transaction.atomic
    def empty_tables(self):
        # Empty Tables and Reset id counters to 1
        for table in self._tables:
            self.empty_table(table)

    def empty_table(self, table):
        query = "TRUNCATE TABLE {0} RESTART IDENTITY CASCADE;".format(table)
        cursor = connection.cursor()
        cursor.execute(query)
