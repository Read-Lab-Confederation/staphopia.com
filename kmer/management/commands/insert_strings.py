""" Insert Jellyfish output into the database. """
import glob
import sys

from bitarray import bitarray

from django.db import connection, transaction
from django.core.management.base import BaseCommand

from kmer.models import Binary
from staphopia.utils import timeit, gziplines


class Command(BaseCommand):
    help = 'Insert Kmer data generated by Jellyfish into the database.'

    _code = {
        'A': bitarray('01'),
        'C': bitarray('11'),
        'G': bitarray('00'),
        'T': bitarray('10')
    }

    _tables = ['kmer_binary']

    def add_arguments(self, parser):
        parser.add_argument('jellyfish', metavar='JELLYFISH_COUNTS',
                            help=('Directory of compressed (gzip) Jellyfish '
                                  'counts to be inserted.'))
        parser.add_argument('--empty', action='store_true',
                            help='Empty tables and reset counts.')

    def handle(self, *args, **opts):
        if opts['empty']:
            # Empty Tables
            self.empty_tables()
            sys.exit()

        # Read Jellyfish file
        self.kmers = {}
        total = 0
        for jellyfish_file in glob.glob(opts['jellyfish']):
            self.read_jellyfish_counts(jellyfish_file)
            total += 1
            print total
            if total == 50:
                break

        print len(self.kmers.keys())

    def encode(self, seq):
        a = bitarray()
        a.encode(self._code, seq)
        return a.tobytes()

    def decode(self, seq):
        a = bitarray()
        a.frombytes(seq)
        return a.decode(self._code)[0:31]

    @timeit
    def read_jellyfish_counts(self, jellyfish_file):
        for line in gziplines(jellyfish_file):
            word, count = line.rstrip().split(' ')
            self.kmers[self.encode(word)] = True

    @timeit
    def encode_words(self, words):
        # Encode kmers
        return [self.encode(word) for word in words]

    @timeit
    def insert_kmer(self):
        # Insert bit encoded kmers
        new_kmers = Binary.objects.bulk_create_new(
            self.encode_words(self.kmer_binary)
        )
        self.kmer_binary = []

        return new_kmers

    @transaction.atomic
    def empty_tables(self):
        # Empty Tables and Reset id counters to 1
        for table in self._tables:
            self.empty_table(table)
            self.reset_counter(table)

    def empty_table(self, table):
        query = "TRUNCATE TABLE {0} RESTART IDENTITY CASCADE;".format(table)
        cursor = connection.cursor()
        cursor.execute(query)
