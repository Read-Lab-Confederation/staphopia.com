""" Insert Jellyfish output into the database. """
import itertools

from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = 'Insert Kmer data generated by Jellyfish into the database.'

    def add_arguments(self, parser):
        parser.add_argument('counts', metavar='UNIQ_COUNTS',
                            help='Text file of unique kmers (uniq- c).')
        parser.add_argument('--length', type=int, dest='length', default=3,
                            help='Max length of kmer to count. (Default = 3)')
        parser.add_argument('--kmers', type=int, dest='kmers', default=0,
                            help='Number of kmers to count. (Default is all)')

    def init_counts(self, length=3):
        counts = {}
        for i in xrange(length):
            k = i + 1
            counts['all_{0}'.format(k)] = {}
            counts['singleton_{0}'.format(k)] = {}
            counts['multiple_{0}'.format(k)] = {}
            for p in itertools.product(['A', 'T', 'G', 'C'], repeat=k):
                kmer = ''.join(p)
                counts['all_{0}'.format(k)][kmer] = 0
                counts['singleton_{0}'.format(k)][kmer] = 0
                counts['multiple_{0}'.format(k)][kmer] = 0

        return counts

    def handle(self, *args, **opts):
        # Read count file
        first_count = self.init_counts(opts['length'])
        last_count = self.init_counts(opts['length'])

        total = 1
        with open(opts['counts'], "r") as f:
            for line in f:
                line = line.strip()
                count, kmer = line.split(' ')

                first = kmer[0:opts['length']]
                last = kmer[-opts['length']:]

                fs = []
                for i in xrange(opts['length']):
                    fs.append(first[i])
                    k = i + 1
                    ls = last[-k:]

                    if int(count) == 1:
                        first_count['singleton_{0}'.format(k)][''.join(fs)] += 1
                        last_count['singleton_{0}'.format(k)][ls] += 1
                    else:
                        first_count['multiple_{0}'.format(k)][''.join(fs)] += 1
                        last_count['multiple_{0}'.format(k)][ls] += 1

                    first_count['all_{0}'.format(k)][''.join(fs)] += 1
                    last_count['all_{0}'.format(k)][ls] += 1

                total += 1
                if opts['kmers'] and opts['kmers'] == total:
                    break
                elif total % 1000000 == 0:
                    print total

        print '## First Counts'
        for k, v in iter(sorted(first_count.iteritems())):
            print '\n#### {0}'.format(k)
            with open('{0}-first.txt'.format(k), "w") as f:
                for kk, vv in iter(sorted(first_count[k].items())):
                    f.write('{0}\t{1}\n'.format(kk, vv))

        print '\n\n## Last Counts'
        for k, v in iter(sorted(last_count.items())):
            print '\n#### {0}'.format(k)
            with open('{0}-last.txt'.format(k), "w") as f:
                for kk, vv in iter(sorted(last_count[k].items())):
                    f.write('{0}\t{1}\n'.format(kk, vv))
