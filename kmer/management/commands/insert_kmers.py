""" Insert Jellyfish output into the database. """
import gzip
import psycopg2
import time

from bitarray import bitarray

from django.db import connection, transaction
from django.core.management.base import BaseCommand, CommandError

from samples.models import Sample
from analysis.models import PipelineVersion
from kmer.models import Kmer, KmerBinary, KmerCount, KmerTotal


def timeit(f):
    def f_timer(*args, **kwargs):
        start = time.time()
        result = f(*args, **kwargs)
        end = time.time()
        print f.__name__, 'took', end - start, 'time'
        return result
    return f_timer


class Command(BaseCommand):
    help = 'Insert Kmer data generated by Jellyfish into the database.'

    _code = {
        'A': bitarray('01'),
        'C': bitarray('11'),
        'G': bitarray('00'),
        'T': bitarray('10')
    }

    _tables = [
        'kmer_kmercount',
        'kmer_kmerbinary',
        'kmer_kmertotal',
        'kmer_kmer',
    ]

    def add_arguments(self, parser):
        parser.add_argument('sample_tag', metavar='SAMPLE_TAG',
                            help='Sample tag of the data.')
        parser.add_argument('jellyfish', metavar='JELLYFISH_COUNTS',
                            help=('Compressed (gzip) Jellyfish counts to be '
                                  'inserted.'))
        parser.add_argument('--pipeline_version', type=str, default="0.1",
                            dest='pipeline_version',
                            help=('Version of the pipeline used in this '
                                  'analysis. (Default: 0.1)')),

    def handle(self, *args, **opts):
        # Get Sample instance
        try:
            sample = Sample.objects.get(sample_tag=opts['sample_tag'])
        except Sample.DoesNotExist:
            raise CommandError('sample_tag {0} does not exist'.format(
                opts['sample_tag']
            ))

        # Get PipelineVersion instance
        try:
            pipeline_version = PipelineVersion.objects.get_or_create(
                module='kmer',
                version=opts['pipeline_version']
            )[0]
        except PipelineVersion.DoesNotExist:
            raise CommandError('Error saving pipeline information')

        # Create kmer instance
        self.kmer_instance, created = Kmer.objects.get_or_create(
            sample=sample,
            version=pipeline_version
        )

        # Read Jellyfish file
        self.read_jellyfish_counts(opts['jellyfish'])

    def encode(self, seq):
        a = bitarray()
        a.encode(self._code, seq)
        return a.tobytes()

    def decode(self, seq):
        a = bitarray()
        a.frombytes(seq)
        return a.decode(self._code)[0:31]

    def chunks(self, l, n):
        """ Yield successive n-sized chunks from l. """
        for i in xrange(0, len(l), n):
            yield l[i:i + n]

    def read_jellyfish_counts(self, jellyfish_file):
        # Empty Tables
        # self.empty_tables()

        # Inititalize values
        total = 0
        singletons = 0
        self.kmer_counts = {}
        self.kmer_binary = []
        self.new_kmers = 0

        fh = gzip.open(jellyfish_file)
        for line in fh:
            if total % 100000 == 0 and total > 0:
                self.process_kmers()

            word, count = line.rstrip().split(' ')
            self.kmer_counts[word] = int(count)
            self.kmer_binary.append(KmerBinary(string=self.encode(word)))

            # increment totals
            total += 1
            if int(count) == 1:
                singletons += 1

        # Process remaining kmers and insert totals
        self.process_kmers()
        KmerTotal.objects.create(
            kmer=self.kmer_instance,
            total=total,
            singletons=singletons,
            new_kmers=self.new_kmers
        )

    def process_kmers(self):
        # Insert Kmers and Counts
        self.insert_kmer()
        self.insert_count()

        return None

    def insert_kmer(self):
        # Insert bit encoded kmers
        self.new_kmers += KmerBinary.objects.bulk_create_new(self.kmer_binary)
        self.kmer_binary = []

        return None

    def get_kmer_binary_inbulk(self, kmers):
        self.binary_pks = {}

        pks = []
        binary = [self.encode(k) for k in kmers]
        query = (
            "SELECT id, string FROM kmer_kmerbinary WHERE string IN ({0});"
        ).format(','.join([str(psycopg2.Binary(k)) for k in binary]))
        cursor = connection.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()

        for row in rows:
            pks.append(row[0])
            self.binary_pks[''.join(self.decode(str(row[1])))] = row[0]

        self.binary_instances = KmerBinary.objects.in_bulk(pks)

    def build_counts(self, words):
        for word in words:
            count = self.kmer_counts[word]
            self.binary_counts.append(
                KmerCount(
                    kmer=self.kmer_instance,
                    string=self.binary_instances[self.binary_pks[word]],
                    count=count
                )
            )

    def insert_count(self):
        self.binary_counts = []
        self.get_kmer_binary_inbulk(self.kmer_counts.keys())
        self.build_counts(self.kmer_counts.keys())

        # Insert bit encoded kmers counts
        with transaction.atomic():
            KmerCount.objects.bulk_create(self.binary_counts, batch_size=10000)

        # Reset kmer counts
        self.kmer_counts = {}

        return None

    @transaction.atomic
    def empty_tables(self):
        # Empty Tables and Reset id counters to 1
        for table in self._tables:
            self.empty_table(table)
            self.reset_counter(table)

    def empty_table(self, table):
        cursor = connection.cursor()
        cursor.execute("TRUNCATE TABLE {0} CASCADE;".format(table))

    def reset_counter(self, table):
        query = ("SELECT setval(pg_get_serial_sequence('{0}', 'id'), "
                 "coalesce(max(id),0) + 1, false) FROM {0};").format(table)
        cursor = connection.cursor()
        cursor.execute(query)
